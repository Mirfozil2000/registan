// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  teacher
  student
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      UserRole @default(student)
  student   Student?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id                Int                 @id @default(autoincrement())
  fullName          String
  birthDate         DateTime
  class             String
  address           String
  phone             String?
  userId            Int                 @unique
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  classGroup        ClassGroup?         @relation(fields: [classGroupId], references: [id])
  classGroupId      Int?
  enrollmentHistory EnrollmentHistory[]
  medicalRecords    MedicalRecord[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model ClassGroup {
  id                Int                 @id @default(autoincrement())
  name              String
  grade             Int
  academicYear      Int
  students          Student[]
  enrollmentHistory EnrollmentHistory[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model EnrollmentHistory {
  id           Int        @id @default(autoincrement())
  studentId    Int
  student      Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  classGroupId Int
  classGroup   ClassGroup @relation(fields: [classGroupId], references: [id], onDelete: Cascade)
  startDate    DateTime
  endDate      DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model MedicalRecord {
  id          Int      @id @default(autoincrement())
  studentId   Int
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  recordDate  DateTime
  description String
  fileUrl     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
